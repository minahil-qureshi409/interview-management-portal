generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Job {
  id           Int           @id @default(autoincrement())
  title        String
  department   String
  description  String
  requirements String
  applications Application[]
}

model Application {
  id         Int      @id @default(autoincrement())
  jobId      Int
  name       String
  email      String
  resumeUrl  String
  skills     String?
  experience String?
  createdAt  DateTime @default(now())
  job        Job      @relation(fields: [jobId], references: [id])
}

enum ApplicationStatus {
  APPLIED
  REVIEWING
  INTERVIEW_SCHEDULED
  REJECTED
  HIRED
}

model Candidate {
  id          Int     @id @default(autoincrement())
  firstName   String
  middleName  String?
  lastName    String
  candidateId String? @unique
  title       String?
  company     String?
  email       String  @unique
  phone       String?

  status ApplicationStatus @default(APPLIED)

  workExperience WorkExperience[]
  education      Education[]
  languageSkills LanguageSkill[]
  travelMobility TravelMobility[]
  documents      Document[]
  moreInfo       String?
  skills         String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  interviews Interview[] 
}

model WorkExperience {
  id               Int       @id @default(autoincrement())
  companyName      String
  title            String
   currentlyWorking Boolean? 
  fromDate         DateTime
  endDate          DateTime?
  country          String?
  responsibilities String?
  candidateId      Int
  candidate        Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
}

model Education {
  id          Int       @id @default(autoincrement())
  institute   String
  specifyOther String?  
  degree      String?
  major       String?
  fromDate    DateTime?
  endDate     DateTime?
  country     String?
  candidateId Int
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
}

model LanguageSkill {
  id          Int       @id @default(autoincrement())
  language    String
  speaking    String?
  reading     String?
  writing     String?
  candidateId Int
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
}

model TravelMobility {
  id                    Int       @id @default(autoincrement())
  willingToRelocate     String?
  availabilityForTravel String?
  candidateId           Int
  candidate             Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
}

model Document {
  id          Int       @id @default(autoincrement())
  fileName    String
  fileUrl     String?
  fileType    String?
  candidateId Int
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
}

model Interview {
  id              Int      @id @default(autoincrement())
  interviewDate   DateTime
  interviewType   String   // e.g., "Technical Screening", "HR Round"
  interviewerName String
  meetLink        String?
  notes           String?
  createdAt       DateTime @default(now())

  candidateId Int
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
}
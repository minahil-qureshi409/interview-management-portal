// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum Role {
  CANDIDATE
  INTERVIEWER
  HR_MANAGER
}

model User {
  id                 String      @id @default(cuid())
  name               String?
  email              String?     @unique
  emailVerified      DateTime?
  image              String?
  role               Role        @default(CANDIDATE)
  password           String?
  candidateProfile   Candidate? // A user might have one candidate profile
  assignedInterviews Interview[] @relation("InterviewerAppointments")
  accounts           Account[]
  sessions           Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum ApplicationStatus {
  APPLIED
  REVIEWING
  INTERVIEW_SCHEDULED
  INTERVIEW_COMPLETED
  REJECTED
  HIRED
}

model Candidate {
  id          Int      @id @default(autoincrement())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  firstName   String
  middleName  String?
  lastName    String
  candidateId String?  @unique
  title       String?
  company     String?
  phone       String?
  // NOTE: 'email' field has been removed. We will get it from the related 'user'.
  status      ApplicationStatus @default(APPLIED)
  skills      String[]
  moreInfo    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  workExperience WorkExperience[]
  education      Education[]
  languageSkills LanguageSkill[]
  travelMobility TravelMobility[]
  documents      Document[]
  interviews     Interview[]
}

model WorkExperience {
  id               Int       @id @default(autoincrement())
  companyName      String
  title            String
  currentlyWorking Boolean?
  fromDate         DateTime
  endDate          DateTime?
  country          String?
  responsibilities String?
  candidateId      Int
  candidate        Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
}

model Education {
  id           Int       @id @default(autoincrement())
  institute    String
  specifyOther String?
  degree       String?
  major        String?
  fromDate     DateTime?
  endDate      DateTime?
  country      String?
  candidateId  Int
  candidate    Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
}

model LanguageSkill {
  id          Int       @id @default(autoincrement())
  language    String
  speaking    String?
  reading     String?
  writing     String?
  candidateId Int
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
}

model TravelMobility {
  id                    Int       @id @default(autoincrement())
  willingToRelocate     String?
  availabilityForTravel String?
  candidateId           Int
  candidate             Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
}

model Document {
  id          Int       @id @default(autoincrement())
  fileName    String
  fileUrl     String?
  fileType    String?
  candidateId Int
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
}

model Interview {
  id            Int      @id @default(autoincrement())
  interviewDate DateTime
  interviewType String
  meetLink      String?
  notes         String?
  feedback      String?
  createdAt     DateTime @default(now())
  
  interviewerId String
  interviewer   User     @relation("InterviewerAppointments", fields: [interviewerId], references: [id])
  // NOTE: 'interviewerName' field has been removed. We will get it from the related 'interviewer'.

  candidateId Int
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
}